from __future__ import annotations
from typing import List, Optional, Literal

from pydantic import BaseModel, HttpUrl, AnyUrl

from app.telegram.models.utils import ParsedAndRaw


class Duration(BaseModel):
    """Represents the duration of a media item with both human-readable and raw formats.

    Attributes:
        formatted (str): Human-readable duration string (e.g., "2:30" for 150 seconds).
        raw (int): Duration in seconds as an integer value.
    """
    formatted: str
    raw: int


class MediaItem(BaseModel):
    """Represents a media item that can be included in a Telegram post.

    Attributes:
        url (Optional[HttpUrl]): Direct URL to access the media file.
        thumb (Optional[HttpUrl]): URL of the thumbnail image for the media (if available).
        waves (Optional[str]): URL of the waveform visualization for audio files.
        duration (Optional[Duration]): Duration object for time-based media (videos/audio).
        type (Literal["image", "video", "voice", "roundvideo", "sticker", "gif"]):
            The media type classification.
        available (Optional[bool]): Indicates if the media file is currently accessible.
    """
    url: Optional[HttpUrl] = None
    thumb: Optional[HttpUrl] = None
    waves: Optional[str] = None
    duration: Optional[Duration] = None
    type: Literal["image", "video", "voice", "roundvideo", "sticker", "gif"]
    available: Optional[bool] = None


class TextEntities(BaseModel):
    """Represents formatted text entities within message content.

    Attributes:
        offset (int): Starting character position of the entity (0-based index).
        length (int): Number of characters included in the entity.
        type (Literal[...]): Formatting type of the text entity.
        language (Optional[str]): Programming language for 'pre' entities (code blocks).
    """
    offset: int
    length: int
    type: Literal[
        "italic", "bold", "code", "spoiler", "strikethrough",
        "underline", "text_link", "url", "pre", "emoji",
        "animoji", "hashtag"
    ]
    language: Optional[str] = None


class Text(BaseModel):
    """Contains the textual content of a post with formatting information.

    Attributes:
        string (str): Plain text content without formatting.
        html (str): Original HTML-formatted text with all markup.
        entities (Optional[List[TextEntities]]): Detailed formatting entities for rich text.
    """
    string: str
    html: str
    entities: Optional[List[TextEntities]] = None


class PollOptions(BaseModel):
    """Represents an individual option within a poll.

    Attributes:
        name (str): Text content of the poll option.
        percent (int): Percentage of total votes this option has received.
    """
    name: str
    percent: int


class Poll(BaseModel):
    """Contains all data related to a poll included in a post.

    Attributes:
        question (str): The main question being asked in the poll.
        type (Optional[str]): Special poll type (e.g., quiz, multiple choice).
        votes (str): Total vote count displayed as a formatted string.
        options (List[PollOptions]): Available choices and their vote percentages.
    """
    question: str
    type: Optional[str] = None
    votes: str
    options: List[PollOptions]


class Inline(BaseModel):
    """Represents an inline button attached to a post.

    Attributes:
        title (str): Display text on the button.
        url (HttpUrl): Destination URL when the button is clicked.
    """
    title: str
    url: HttpUrl


class Reply(BaseModel):
    """Contains information about a post that this message is replying to.

    Attributes:
        cover (Optional[AnyUrl]): URL of the preview image for the replied message.
        name (ParsedAndRaw): Author information of the original message.
        text (ParsedAndRaw): Content preview of the original message.
        to_message (int): Unique identifier of the message being replied to.
    """
    cover: Optional[AnyUrl]
    name: ParsedAndRaw
    text: ParsedAndRaw
    to_message: int


class PreviewLink(BaseModel):
    """Metadata for URL previews generated by Telegram.

    Attributes:
        title (Optional[str]): Title extracted from the linked page.
        url (HttpUrl): Original URL that was previewed.
        site_name (Optional[str]): Name of the website/domain.
        description (Optional[ParsedAndRaw]): Summary text from the linked page.
        thumb (Optional[HttpUrl]): Preview image URL from the linked content.
    """
    title: Optional[str]
    url: HttpUrl
    site_name: Optional[str]
    description: Optional[ParsedAndRaw]
    thumb: Optional[HttpUrl]


class Reacts(BaseModel):
    """Represents reaction counts and types on a post.

    Attributes:
        count (str): Total reaction count as a formatted string.
        type (Literal["telegram_stars", "emoji", "custom_emoji"]):
            Classification of reaction system being used.
        emoji (Optional[str]): Unicode emoji character (for standard emoji reactions).
        emoji_id (Optional[str]): Custom emoji identifier (for custom emoji reactions).
        emoji_image (Optional[HttpUrl]): Telegram hosted emoji image
    """
    count: str
    type: Literal["telegram_stars", "emoji", "custom_emoji"]
    emoji: Optional[str] = None
    emoji_id: Optional[str] = None
    emoji_image: Optional[HttpUrl] = None


class ContentPost(BaseModel):
    """Aggregates all possible content types that a Telegram post can contain.

    Attributes:
        text (Optional[Text]): Primary text content with formatting.
        media (Optional[List[MediaItem]]): Attached media files.
        poll (Optional[Poll]): Embedded poll data.
        inline (Optional[List[Inline]]): Interactive buttons.
        reply (Optional[Reply]): Reply context information.
        preview_link (Optional[PreviewLink]): URL preview data.
        reacts (Optional[List[Reacts]]): Reaction summary for the post.
    """
    text: Optional[Text] = None
    media: Optional[List[MediaItem]] = None
    poll: Optional[Poll] = None
    inline: Optional[List[Inline]] = None
    reply: Optional[Reply] = None
    preview_link: Optional[PreviewLink] = None
    reacts: Optional[List[Reacts]] = None


class Date(BaseModel):
    """Timestamp information with multiple representations.

    Attributes:
        string (str): Human-readable date/time string.
        unix (int): POSIX timestamp (seconds since epoch).
    """
    string: str
    unix: int


class Footer(BaseModel):
    """Metadata displayed at the bottom of a post.

    Attributes:
        views (Optional[str]): View count as formatted string.
        edited (Optional[bool]): Indicates if post has been modified.
        author (Optional[ParsedAndRaw]): Post author information.
        date (Date): Publication timestamp details.
    """
    views: Optional[str] = None
    edited: Optional[bool] = False
    author: Optional[ParsedAndRaw] = None
    date: Date


class Forwarded(BaseModel):
    """Information about the original source of a forwarded message.

    Attributes:
        name (ParsedAndRaw): Source channel/user name with original formatting.
        url (Optional[HttpUrl]): Link to the original message source.
    """
    name: ParsedAndRaw
    url: Optional[HttpUrl] = None


class Post(BaseModel):
    """Complete representation of a Telegram channel post with all components.

    Attributes:
        id (int): Unique message identifier within the channel.
        content (ContentPost): All message content components.
        footer (Footer): Post metadata and statistics.
        forwarded (Optional[Forwarded]): Forwarding information if applicable.
        view (str): Current view count or visibility status.
    """
    id: int
    content: ContentPost
    footer: Footer
    forwarded: Optional[Forwarded] = None
    view: str
